package com.flipkart.krystal.caramel.samples.basic.stringconversion;

import static com.flipkart.krystal.caramel.samples.basic.stringconversion.StringConversionPayload.StringConversionFields.input;
import static com.flipkart.krystal.caramel.samples.basic.stringconversion.StringConversionPayload.StringConversionFields.output;

import com.flipkart.krystal.caramel.model.CaramelField;
import com.flipkart.krystal.caramel.model.SimpleCaramelField;
import com.flipkart.krystal.caramel.model.Value;
import com.flipkart.krystal.caramel.model.ValueImpl;
import org.checkerframework.checker.initialization.qual.NotOnlyInitialized;

// AutoGenerated and managed by Caramel
class StringConversionPayload implements StringConversionPayloadDefinition {

  StringConversionPayload() {
    _output = new ValueImpl<>(output, this);
    _input = new ValueImpl<>(input, this);
  }

  interface StringConversionFields {
    CaramelField<Object, StringConversionPayload> input =
        new SimpleCaramelField<>(
            "input",
            StringConversionPayload.class,
            StringConversionPayload::input,
            StringConversionPayload::setInput);

    CaramelField<String, StringConversionPayload> output =
        new SimpleCaramelField<>(
            "output",
            StringConversionPayload.class,
            StringConversionPayload::output,
            StringConversionPayload::setOutput);
  }

  @NotOnlyInitialized private final Value<Object, StringConversionPayload> _input;
  @NotOnlyInitialized private final Value<String, StringConversionPayload> _output;

  @Override
  public Object input() {
    return _input.getOrThrow();
  }

  public void setInput(Object value) {
    _input.set(value);
  }

  @Override
  public String output() {
    return _output.getOrThrow();
  }

  public void setOutput(String string) {
    _output.set(string);
  }
}
